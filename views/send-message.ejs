<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Sender Pro</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background: #f5f7fa;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            color: #1a202c;
            line-height: 1.6;
            min-height: 100vh;
        }

        .header-section {
            background: #128C7E;
            color: white;
            padding: 2rem 0;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .header-section h1 {
            margin: 0;
            font-size: 2.2rem;
            font-weight: 700;
        }

        .header-section .subtitle {
            margin-top: 0.5rem;
            font-size: 1rem;
            opacity: 0.95;
        }

        .main-content {
            max-width: 100%;
            padding: 2rem 15px;
        }

        .card-section {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
        }

        .card-title {
            font-size: 1.125rem;
            font-weight: 700;
            color: #1a202c;
            margin: 0 0 1.25rem 0;
            display: flex;
            align-items: center;
            padding-bottom: 0.75rem;
            border-bottom: 2px solid #f5f7fa;
        }

        .card-title i {
            margin-right: 0.75rem;
            color: #128C7E;
            font-size: 1.25rem;
        }

        .form-control {
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
            transition: all 0.2s ease;
        }

        .form-control:focus {
            border-color: #128C7E;
            box-shadow: 0 0 0 3px rgba(18, 140, 126, 0.1);
            outline: none;
        }

        .btn-send {
            background: #25D366;
            border: none;
            color: white;
            padding: 1rem 2.5rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.05rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(37, 211, 102, 0.3);
        }

        .btn-send:hover:not(:disabled) {
            background: #20bd5f;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(37, 211, 102, 0.4);
        }

        .btn-send:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Timer Container */
        .timer-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            animation: slideIn 0.4s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .timer-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem 2rem;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
            border: 2px solid #128C7E;
            min-width: 260px;
        }

        .timer-card.break-timer {
            border-color: #e53e3e;
        }

        .timer-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #128C7E;
        }

        .timer-card.break-timer .timer-header {
            color: #e53e3e;
        }

        .timer-header i {
            margin-right: 0.5rem;
            font-size: 1.1rem;
        }

        .timer-display {
            font-size: 2.75rem;
            font-weight: 800;
            text-align: center;
            font-family: 'Courier New', monospace;
            color: #128C7E;
            margin: 0.5rem 0;
        }

        .timer-card.break-timer .timer-display {
            color: #e53e3e;
        }

        .timer-label {
            text-align: center;
            font-size: 0.8rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            font-weight: 600;
        }

        .timer-progress {
            height: 6px;
            background: #e2e8f0;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 1rem;
        }

        .timer-progress-bar {
            height: 100%;
            background: #25D366;
            border-radius: 10px;
            transition: width 1s linear;
        }

        .timer-card.break-timer .timer-progress-bar {
            background: #e53e3e;
        }

        /* Monitor Cards */
        .monitor-card {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.25rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
            transition: all 0.3s ease;
            height: 100%;
        }

        .monitor-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
            border-color: #128C7E;
        }

        .monitor-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.75rem;
            color: white;
            flex-shrink: 0;
        }

        .monitor-value {
            font-size: 2.25rem;
            font-weight: 800;
            color: #1a202c;
            line-height: 1;
        }

        .bg-primary-custom {
            background: #128C7E;
        }

        .bg-success-custom {
            background: #38a169;
        }

        .bg-warning-custom {
            background: #d69e2e;
        }

        .bg-info-custom {
            background: #3182ce;
        }

        /* Status Section */
        .status-section {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
        }

        .status-item {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #f5f7fa;
            transition: all 0.2s ease;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .status-item:hover {
            background-color: #f8fafc;
        }

        .status-icon {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 0.75rem;
            display: inline-block;
        }

        .status-success .status-icon {
            background: #38a169;
        }

        .status-error .status-icon {
            background: #e53e3e;
        }

        .status-pending .status-icon {
            background: #d69e2e;
        }

        .status-info .status-icon {
            background: #3182ce;
        }

        /* Alert */
        .custom-alert {
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 9998;
            min-width: 350px;
            animation: slideIn 0.4s ease;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            border-radius: 12px;
        }

        .btn-template {
            background: #128C7E;
            border: none;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-template:hover {
            background: #0f7268;
            transform: translateY(-2px);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .timer-container {
                top: 10px;
                right: 10px;
                left: 10px;
            }

            .timer-card {
                min-width: auto;
                padding: 1rem 1.5rem;
            }

            .timer-display {
                font-size: 2.25rem;
            }

            .custom-alert {
                right: 10px;
                left: 10px;
                min-width: auto;
            }

            .main-content {
                padding: 1rem 10px;
            }

            .header-section h1 {
                font-size: 1.75rem;
            }
        }

        @media (max-width: 576px) {
            .card-section {
                padding: 1rem;
            }

            .monitor-value {
                font-size: 1.75rem;
            }
        }

        .template-item {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            background: white;
        }

        .template-item:hover {
            border-color: #128C7E;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>

<body>
    <!-- Timer Container -->
    <div class="timer-container" id="timerContainer" style="display: none;">
        <div class="timer-card" id="timerCard">
            <div class="timer-header">
                <i class="fas fa-clock"></i>
                <span id="timerStatus">Next Message</span>
            </div>
            <div class="timer-display" id="timerDisplay">00:00</div>
            <div class="timer-label" id="timerLabel">Waiting...</div>
            <div class="timer-progress">
                <div class="timer-progress-bar" id="timerProgressBar"></div>
            </div>
        </div>
    </div>

    <!-- Header -->
    <div class="header-section">
        <div class="container-fluid">
            <h1><i class="fab fa-whatsapp me-3"></i>WhatsApp Sender Pro</h1>
            <p class="subtitle">Safe & Professional Bulk Messaging Solution 🛡️</p>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container-fluid">
            <!-- Monitoring Dashboard -->
            <div class="row mb-3">
                <div class="col-12 mb-3">
                    <h3 class="mb-0 fw-bold">
                        <i class="fas fa-tachometer-alt me-2" style="color: #128C7E;"></i>
                        Live Dashboard
                    </h3>
                </div>
                <div class="col-12 col-sm-6 col-lg-3 mb-3">
                    <div class="monitor-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="monitor-icon bg-primary-custom">
                                <i class="fas fa-paper-plane"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="text-muted small fw-semibold">TODAY</div>
                                <div class="monitor-value" id="todayMessages">0</div>
                                <div class="text-muted small">Messages sent</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-lg-3 mb-3">
                    <div class="monitor-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="monitor-icon bg-success-custom">
                                <i class="fas fa-calendar-alt"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="text-muted small fw-semibold">THIS MONTH</div>
                                <div class="monitor-value" id="monthMessages">0</div>
                                <div class="text-muted small">Total sent</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-lg-3 mb-3">
                    <div class="monitor-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="monitor-icon bg-warning-custom">
                                <i class="fas fa-broadcast-tower"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="text-muted small fw-semibold">SENDING</div>
                                <div class="monitor-value" id="liveSending">0</div>
                                <div class="text-muted small">In progress</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-lg-3 mb-3">
                    <div class="monitor-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="monitor-icon bg-info-custom">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="text-muted small fw-semibold">RECIPIENTS</div>
                                <div class="monitor-value" id="totalRecipients">0</div>
                                <div class="text-muted small">In queue</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Templates -->
            <div class="card-section">
                <h3 class="card-title">
                    <i class="fas fa-file-alt"></i>
                    Message Templates
                </h3>
                <div class="row g-3">
                    <div class="col-12 col-md-9">
                        <select class="form-control" id="templateSelect">
                            <option value="">Select a template...</option>
                        </select>
                    </div>
                    <div class="col-12 col-md-3">
                        <button type="button" class="btn btn-template w-100" data-bs-toggle="modal"
                            data-bs-target="#templateModal">
                            <i class="fas fa-plus me-2"></i>Manage
                        </button>
                    </div>
                </div>
            </div>

            <!-- Form -->
            <form id="sendForm">
                <div class="row">
                    <div class="col-12 col-lg-6 mb-3">
                        <div class="card-section">
                            <h3 class="card-title">
                                <i class="fas fa-phone"></i>
                                Phone Numbers
                            </h3>
                            <textarea class="form-control" id="numbers" rows="8"
                                placeholder="919876543210&#10;918765432109&#10;917654321098&#10;&#10;Enter one number per line with country code"
                                required></textarea>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Format: Country code + number
                                </small>
                                <span class="badge bg-primary px-3 py-2" id="numberCount">0 numbers</span>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 col-lg-6 mb-3">
                        <div class="card-section">
                            <h3 class="card-title">
                                <i class="fas fa-comment"></i>
                                Message Content
                            </h3>
                            <textarea class="form-control" id="message" rows="8"
                                placeholder="Type your message here...&#10;&#10;Keep it professional and engaging!"
                                required></textarea>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <small class="text-muted">
                                    <i class="fas fa-lightbulb me-1"></i>
                                    Max 1600 characters
                                </small>
                                <span class="badge bg-secondary px-3 py-2" id="charCount">0 chars</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-send" id="sendButton">
                        <i class="fas fa-paper-plane me-2"></i>
                        <span>Send Messages</span>
                        <div class="spinner-border spinner-border-sm ms-2 d-none" role="status" id="btnSpinner">
                            <span class="visually-hidden">Sending...</span>
                        </div>
                    </button>
                </div>
            </form>

            <!-- Status Section -->
            <div class="status-section mt-4">
                <div class="p-3 border-bottom bg-light">
                    <div class="row align-items-center">
                        <div class="col-12 col-md-6 mb-2 mb-md-0">
                            <h4 class="mb-0 fw-bold">
                                <i class="fas fa-chart-line me-2" style="color: #128C7E;"></i>
                                Live Status Monitor
                            </h4>
                        </div>
                        <div class="col-12 col-md-6">
                            <div class="d-flex gap-2 flex-wrap justify-content-md-end">
                                <span class="badge bg-success px-3 py-2">
                                    <i class="fas fa-check-circle me-1"></i>
                                    <span id="sentCount">0</span> Sent
                                </span>
                                <span class="badge bg-warning px-3 py-2">
                                    <i class="fas fa-clock me-1"></i>
                                    <span id="pendingCount">0</span> Pending
                                </span>
                                <span class="badge bg-danger px-3 py-2">
                                    <i class="fas fa-times-circle me-1"></i>
                                    <span id="failedCount">0</span> Failed
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div style="max-height: 400px; overflow-y: auto;">
                    <ul class="list-unstyled mb-0" id="statusList">
                        <li class="status-item text-center text-muted py-5">
                            <i class="fas fa-inbox fs-1 mb-3 d-block"></i>
                            <p class="mb-0">Ready to send messages</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Template Modal -->
    <div class="modal fade" id="templateModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background: #128C7E; color: white;">
                    <h5 class="modal-title">
                        <i class="fas fa-file-alt me-2"></i>
                        Manage Templates
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="card-section mb-4">
                        <h6 class="fw-bold mb-3">
                            <i class="fas fa-plus me-2"></i>
                            Add New Template
                        </h6>
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Template Name</label>
                            <input type="text" class="form-control" id="templateName" placeholder="Enter template name">
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Message Content</label>
                            <textarea class="form-control" id="templateContent" rows="4"
                                placeholder="Enter your message template"></textarea>
                        </div>
                        <button type="button" class="btn btn-primary" id="saveTemplate">
                            <i class="fas fa-save me-1"></i>Save Template
                        </button>
                    </div>

                    <div class="card-section">
                        <h6 class="fw-bold mb-3">
                            <i class="fas fa-list me-2"></i>
                            Saved Templates
                        </h6>
                        <div id="templatesList">
                            <p class="text-muted text-center py-3">
                                <i class="fas fa-folder-open me-2"></i>
                                No templates saved yet
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let socket;
        try {
            socket = io();
        } catch (e) {
            console.log('Socket.IO not available');
        }

        const form = document.getElementById('sendForm');
        const numbersTextarea = document.getElementById('numbers');
        const messageTextarea = document.getElementById('message');
        const statusList = document.getElementById('statusList');
        const sendButton = document.getElementById('sendButton');
        const btnSpinner = document.getElementById('btnSpinner');
        const templateSelect = document.getElementById('templateSelect');
        const numberCount = document.getElementById('numberCount');
        const charCount = document.getElementById('charCount');

        const sentCount = document.getElementById('sentCount');
        const pendingCount = document.getElementById('pendingCount');
        const failedCount = document.getElementById('failedCount');

        const templateName = document.getElementById('templateName');
        const templateContent = document.getElementById('templateContent');
        const saveTemplateBtn = document.getElementById('saveTemplate');
        const templatesList = document.getElementById('templatesList');

        let counts = { sent: 0, pending: 0, failed: 0, total: 0 };
        let timerInterval = null;

        // Timer Functions
        function showTimer(seconds, label, isBreak = false) {
            const container = document.getElementById('timerContainer');
            const card = document.getElementById('timerCard');
            const display = document.getElementById('timerDisplay');
            const labelEl = document.getElementById('timerLabel');
            const statusEl = document.getElementById('timerStatus');
            const progressBar = document.getElementById('timerProgressBar');

            container.style.display = 'block';

            if (isBreak) {
                card.classList.add('break-timer');
                statusEl.innerHTML = '<i class="fas fa-coffee"></i> Safety Break';
            } else {
                card.classList.remove('break-timer');
                statusEl.innerHTML = '<i class="fas fa-clock"></i> Next Message';
            }

            labelEl.textContent = label;

            let remaining = seconds;
            const totalSeconds = seconds;

            if (timerInterval) clearInterval(timerInterval);

            function updateTimer() {
                const mins = Math.floor(remaining / 60);
                const secs = remaining % 60;
                display.textContent = `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;

                const progress = ((totalSeconds - remaining) / totalSeconds) * 100;
                progressBar.style.width = progress + '%';

                if (remaining <= 0) {
                    clearInterval(timerInterval);
                    hideTimer();
                }
                remaining--;
            }

            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        }

        function hideTimer() {
            const container = document.getElementById('timerContainer');
            const card = document.getElementById('timerCard');
            container.style.display = 'none';
            card.classList.remove('break-timer');
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
        }

        // Alert Functions
        function showAlert(message, type = 'success') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} custom-alert alert-dismissible fade show`;
            alertDiv.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'info-circle'} fs-4 me-3"></i>
                    <div class="flex-grow-1">
                        <strong>${type === 'success' ? 'Success!' : 'Info'}</strong>
                        <div>${message}</div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 5000);
        }

        // Load functions
        loadTemplates();
        loadMessageStats();
        updateNumberCount();
        updateCharCount();

        numbersTextarea.addEventListener('input', updateNumberCount);
        messageTextarea.addEventListener('input', updateCharCount);
        templateSelect.addEventListener('change', loadSelectedTemplate);
        saveTemplateBtn.addEventListener('click', saveTemplate);

        if (socket) {
            socket.off('message-status');
            socket.on('message-status', handleMessageStatus);
        }

        function handleMessageStatus(msg) {
            if (statusList.querySelector(`[data-message="${btoa(unescape(encodeURIComponent(msg)))}"]`)) {
                return;
            }

            addStatusItem(msg);

            // Parse delay from message
            const delayMatch = msg.match(/⏳ Waiting (\d+\.?\d*)s/);
            const breakMatch = msg.match(/⏸️ Taking (\d+) minute break/);

            if (delayMatch) {
                const seconds = Math.ceil(parseFloat(delayMatch[1]));
                showTimer(seconds, 'Delay between messages', false);
            } else if (breakMatch) {
                const minutes = parseInt(breakMatch[1]);
                showTimer(minutes * 60, 'Safety break for protection', true);
            }

            if (msg.toLowerCase().includes('success') || msg.toLowerCase().includes('sent') || msg.includes('✅')) {
                counts.sent++;
                counts.pending = Math.max(0, counts.pending - 1);
                incrementTodayMessages();
            } else if (msg.toLowerCase().includes('error') || msg.toLowerCase().includes('failed') || msg.includes('❌')) {
                counts.failed++;
                counts.pending = Math.max(0, counts.pending - 1);
            }

            updateCounters();
            updateMonitorCard('liveSending', counts.pending);

            if (counts.pending === 0) {
                sendButton.disabled = false;
                btnSpinner.classList.add('d-none');
                hideTimer();

                if (counts.sent > 0) {
                    showAlert(`Batch completed! ${counts.sent} messages sent successfully, ${counts.failed} failed.`, 'success');
                }

                setTimeout(() => {
                    numbersTextarea.value = '';
                    messageTextarea.value = '';
                    updateNumberCount();
                    updateCharCount();
                    updateMonitorCard('liveSending', 0);
                    updateMonitorCard('totalRecipients', 0);

                    setTimeout(() => {
                        counts = { sent: 0, pending: 0, failed: 0, total: 0 };
                        updateCounters();
                    }, 5000);
                }, 2000);
            }
        }

        function simulateSending(numbers, message) {
            let index = 0;
            let sessionCount = 0;
            const interval = setInterval(() => {
                if (index < numbers.length) {
                    const number = numbers[index];
                    const success = Math.random() > 0.1;

                    if (success) {
                        handleMessageStatus(`✅ Sent to ${number} (${index + 1}/${numbers.length})`);
                    } else {
                        handleMessageStatus(`❌ Failed: ${number}`);
                    }

                    sessionCount++;

                    // Simulate delays
                    if (sessionCount >= 15 && index < numbers.length - 1) {
                        handleMessageStatus(`⏸️ Taking 5 minute break for safety...`);
                        sessionCount = 0;
                    } else if (index < numbers.length - 1) {
                        const delay = Math.floor(Math.random() * 7) + 8; // 8-15 seconds
                        handleMessageStatus(`⏳ Waiting ${delay}s... (Human-like delay)`);
                    }

                    index++;
                } else {
                    handleMessageStatus('🎉 Batch completed!');
                    clearInterval(interval);
                }
            }, 2000);
        }

        function addStatusItem(msg) {
            const emptyStatus = statusList.querySelector('.status-item');
            if (emptyStatus && emptyStatus.textContent.includes('Ready to send')) {
                emptyStatus.remove();
            }

            const li = document.createElement('li');
            li.className = 'status-item';
            li.setAttribute('data-message', btoa(unescape(encodeURIComponent(msg))));

            let statusClass = 'status-info';
            if (msg.includes('✅') || msg.toLowerCase().includes('sent')) {
                statusClass = 'status-success';
            } else if (msg.includes('❌') || msg.toLowerCase().includes('failed')) {
                statusClass = 'status-error';
            } else if (msg.includes('⏳') || msg.includes('⏸️')) {
                statusClass = 'status-pending';
            }

            li.classList.add(statusClass);
            li.innerHTML = `<span class="status-icon"></span><span>${msg}</span>`;
            statusList.appendChild(li);
            statusList.parentElement.scrollTop = statusList.parentElement.scrollHeight;
        }

        function updateCounters() {
            sentCount.textContent = counts.sent;
            pendingCount.textContent = counts.pending;
            failedCount.textContent = counts.failed;
        }

        function updateNumberCount() {
            const numbers = numbersTextarea.value.split('\n')
                .map(n => n.trim())
                .filter(n => n.length > 0);
            numberCount.textContent = `${numbers.length} numbers`;
            updateMonitorCard('totalRecipients', numbers.length);
        }

        function updateCharCount() {
            const chars = messageTextarea.value.length;
            charCount.textContent = `${chars} chars`;
        }

        function updateMonitorCard(cardId, value) {
            const element = document.getElementById(cardId);
            if (element) {
                element.textContent = value.toLocaleString();
            }
        }

        function incrementTodayMessages() {
            const current = parseInt(document.getElementById('todayMessages').textContent.replace(/,/g, '')) || 0;
            updateMonitorCard('todayMessages', current + 1);

            const monthlyCurrent = parseInt(document.getElementById('monthMessages').textContent.replace(/,/g, '')) || 0;
            updateMonitorCard('monthMessages', monthlyCurrent + 1);

            saveMessageStats();
        }

        function saveMessageStats() {
            const today = new Date().toDateString();
            const month = new Date().getFullYear() + '-' + (new Date().getMonth() + 1);

            const stats = JSON.parse(localStorage.getItem('whatsapp_stats') || '{}');

            stats.today = stats.today || {};
            stats.monthly = stats.monthly || {};

            stats.today[today] = (stats.today[today] || 0) + 1;
            stats.monthly[month] = (stats.monthly[month] || 0) + 1;

            localStorage.setItem('whatsapp_stats', JSON.stringify(stats));
        }

        function loadMessageStats() {
            const today = new Date().toDateString();
            const month = new Date().getFullYear() + '-' + (new Date().getMonth() + 1);

            const stats = JSON.parse(localStorage.getItem('whatsapp_stats') || '{}');

            const todayCount = (stats.today && stats.today[today]) || 0;
            const monthlyCount = (stats.monthly && stats.monthly[month]) || 0;

            updateMonitorCard('todayMessages', todayCount);
            updateMonitorCard('monthMessages', monthlyCount);
        }

        // Template Management
        function loadTemplates() {
            const templates = JSON.parse(localStorage.getItem('whatsapp_templates') || '[]');

            templateSelect.innerHTML = '<option value="">Select a template...</option>';
            templates.forEach((template, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = template.name;
                templateSelect.appendChild(option);
            });

            if (templates.length === 0) {
                templatesList.innerHTML = `
                    <p class="text-muted text-center py-3">
                        <i class="fas fa-folder-open me-2"></i>
                        No templates saved yet
                    </p>
                `;
            } else {
                templatesList.innerHTML = templates.map((template, index) => `
                    <div class="template-item">
                        <div class="fw-bold mb-2">${template.name}</div>
                        <div class="text-muted small mb-2" style="background: #f8f9fa; padding: 0.5rem; border-radius: 6px;">${template.content}</div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary btn-sm" onclick="useTemplate(${index})">
                                <i class="fas fa-check me-1"></i>Use
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteTemplate(${index})">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                `).join('');
            }
        }

        function saveTemplate() {
            const name = templateName.value.trim();
            const content = templateContent.value.trim();

            if (!name || !content) {
                alert('Please enter both template name and content');
                return;
            }

            const templates = JSON.parse(localStorage.getItem('whatsapp_templates') || '[]');

            if (templates.find(t => t.name === name)) {
                alert('Template with this name already exists');
                return;
            }

            templates.push({ name, content });
            localStorage.setItem('whatsapp_templates', JSON.stringify(templates));

            templateName.value = '';
            templateContent.value = '';
            loadTemplates();
            alert('Template saved successfully!');
        }

        function loadSelectedTemplate() {
            const selectedIndex = templateSelect.value;
            if (selectedIndex === '') return;

            const templates = JSON.parse(localStorage.getItem('whatsapp_templates') || '[]');
            if (templates[selectedIndex]) {
                messageTextarea.value = templates[selectedIndex].content;
                updateCharCount();
            }
        }

        function useTemplate(index) {
            const templates = JSON.parse(localStorage.getItem('whatsapp_templates') || '[]');
            if (templates[index]) {
                messageTextarea.value = templates[index].content;
                templateSelect.value = index;
                updateCharCount();

                const modal = bootstrap.Modal.getInstance(document.getElementById('templateModal'));
                if (modal) modal.hide();
            }
        }

        function deleteTemplate(index) {
            if (!confirm('Are you sure you want to delete this template?')) return;

            const templates = JSON.parse(localStorage.getItem('whatsapp_templates') || '[]');
            templates.splice(index, 1);
            localStorage.setItem('whatsapp_templates', JSON.stringify(templates));

            loadTemplates();
        }

        // Initialize default templates
        function initDefaultTemplates() {
            const templates = JSON.parse(localStorage.getItem('whatsapp_templates') || '[]');
            if (templates.length === 0) {
                const defaultTemplates = [
                    {
                        name: "Welcome Message",
                        content: "Welcome to our service! We're excited to have you on board. If you have any questions, feel free to reach out to us."
                    },
                    {
                        name: "Promotional Offer",
                        content: "🎉 Special Offer Alert! Get 20% off on all our products. Use code SAVE20 at checkout. Limited time offer!"
                    },
                    {
                        name: "Event Invitation",
                        content: "You're invited to our exclusive event! Join us for an amazing experience. Date: [DATE], Time: [TIME], Venue: [VENUE]. RSVP required."
                    },
                    {
                        name: "Thank You",
                        content: "Thank you for choosing our services! Your satisfaction is our priority. We appreciate your business and look forward to serving you again."
                    }
                ];

                localStorage.setItem('whatsapp_templates', JSON.stringify(defaultTemplates));
                loadTemplates();
            }
        }

        initDefaultTemplates();

        // Form validation
        function validatePhoneNumber(number) {
            const cleanNumber = number.replace(/\D/g, '');
            return cleanNumber.length >= 10 && cleanNumber.length <= 15;
        }

        function validateMessage(message) {
            return message.trim().length > 0 && message.trim().length <= 1600;
        }

        function enhancedValidation() {
            const numbers = numbersTextarea.value.split('\n')
                .map(n => n.trim())
                .filter(n => n.length > 0);

            const invalidNumbers = numbers.filter(num => !validatePhoneNumber(num));

            if (invalidNumbers.length > 0) {
                alert(`Invalid phone numbers found:\n${invalidNumbers.join('\n')}\n\nPlease check the format.`);
                return false;
            }

            if (!validateMessage(messageTextarea.value)) {
                alert('Message is too long (max 1600 characters) or empty');
                return false;
            }

            return true;
        }

        // Form submission
        form.addEventListener('submit', (e) => {
            e.preventDefault();

            if (!enhancedValidation()) {
                return;
            }

            const numbersInput = numbersTextarea.value;
            const message = messageTextarea.value;

            const numbers = numbersInput.split('\n')
                .map(n => n.trim())
                .filter(n => n.length > 0);

            counts = { sent: 0, pending: numbers.length, failed: 0, total: numbers.length };
            updateCounters();

            updateMonitorCard('liveSending', numbers.length);
            updateMonitorCard('totalRecipients', numbers.length);

            sendButton.disabled = true;
            btnSpinner.classList.remove('d-none');

            statusList.innerHTML = '';

            if (socket) {
                socket.emit('send-message', { numbers, message });
            } else {
                simulateSending(numbers, message);
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function (e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                if (!sendButton.disabled) {
                    form.dispatchEvent(new Event('submit'));
                }
            }

            if (e.key === 'Escape') {
                if (statusList.children.length > 0) {
                    statusList.innerHTML = `
                        <li class="status-item text-center text-muted py-5">
                            <i class="fas fa-inbox fs-1 mb-3 d-block"></i>
                            <p class="mb-0">Ready to send messages</p>
                        </li>
                    `;
                    counts = { sent: 0, pending: 0, failed: 0, total: 0 };
                    updateCounters();
                    updateMonitorCard('liveSending', 0);
                    hideTimer();
                }
            }
        });

        console.log('WhatsApp Sender Pro initialized successfully!');
    </script>
</body>

</html>